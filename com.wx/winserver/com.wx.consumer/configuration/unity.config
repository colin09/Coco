<?xml version="1.0" encoding="utf-8" ?>
<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
  
  <!--
  <!- -alias 定義別名- ->
  <alias alias="IClass" type="ConsoleApplication1.IClass, ConsoleApplication1" />
  <alias alias="MyClass" type="ConsoleApplication1.MyClass, ConsoleApplication1" />
  
  <!- -引入下面的命名空間，可以省的輸入過多的內容- ->
  <namespace name="ConsoleApplication1" />
  <assembly name="ConsoleApplication1" />
  -->

  <container name="defaultContainer">

    <!--
    <register type="IClass" mapTo="MyClass" />
    <register type="ILogger" mapTo="FileLogger"></register>
    -->

    <!--
    <type type="Custom.MyBaseClass" mapTo="Custom.MyConcreteClass">
          <lifetime type="singleton" /> 
    </type>
        
    <types>元素是 container 元素的子元素之一。包含任意数量的 type元素，用以添加类型注册，这些配置被container.RegisterType<TFrom,TTo>()注册;
        type元素的属性。
          name：在注册此类型时使用的名称。此属性是可选的，如果不指定此属性，所在的 add 元素即为默认的类型映射。
          type：容器中配置的源类型。如果这是映射注册，这就是映射的起始对象的类型；如果这是单件注册，这就是对象的类型。此属性是必须的。
          mapTo：类型映射的目标类型。如果这是映射注册，这就是映射的目标对象的类型。此属性是可选的。
          lifetime：设置用于给定的类型和名称的生命周期。
            是一个来自 LifetimeStyle 枚举的值。有效的值是 Transient（默认），它导致了容器每次都创建一个新的实例；
            以及 Singleton，它使容器为每个请求返回同一实例。
              如果在配置一个Type时同时指定了 type 和 mapto 属性，SetSingleton 方法将返回指定在 mapTo 属性中的类型。
              如果 mapTo 属性没有指定值，SetSingleton 方法将返回指定在 type 属性中的类型。
        -->


    <!--register common-->
    <register type="com.wx.common.logger.ILog,com.wx.common" mapTo="com.wx.common.logger.FileLog,com.wx.common" />

    <!--register service
    <register type="com.coco.iservices.IBLL.ICommonService,com.coco.iservices" mapTo="com.coco.services.CommonService,com.coco.services" />
-->
    <!--register esService
    <register type="com.coco.esearch.iservice.IESUserService,com.coco.esearch" mapTo="com.coco.esearch.service.UserSearchService,com.coco.esearch" />
-->
    <!--register mgService
    <register type="com.coco.mongodbs.iservice.IMgUserService,com.coco.mongodbs" mapTo="com.coco.mongodbs.service.MgUserService,com.coco.mongodbs" />
-->
    <!--register repository
    <register type="com.coco.sqldb.EFHui.repository.IUserEntityRepository,com.coco.sqldb" mapTo="com.coco.sqldb.EFHui.repository.UserEntityRepository,com.coco.sqldb" />
    <register type="com.coco.sqldb.EFHui.repository.IRoleEntityRepository,com.coco.sqldb" mapTo="com.coco.sqldb.EFHui.repository.RoleEntityRepository,com.coco.sqldb" />
    <register type="com.coco.sqldb.EFHui.repository.IMenuEntityRepository,com.coco.sqldb" mapTo="com.coco.sqldb.EFHui.repository.MenuEntityRepository,com.coco.sqldb" />
    <register type="com.coco.sqldb.EFHui.repository.IRoleMenuEntityRepository,com.coco.sqldb" mapTo="com.coco.sqldb.EFHui.repository.RoleMenuEntityRepository,com.coco.sqldb" />
    
    <register type="com.coco.sqldb.EFHui.repository.IAirLineEntityRepository,com.coco.sqldb" mapTo="com.coco.sqldb.EFHui.repository.AirLineEntityRepository,com.coco.sqldb" />
    <register type="com.coco.sqldb.EFHui.repository.IAirPortEntityRepository,com.coco.sqldb" mapTo="com.coco.sqldb.EFHui.repository.AirPortEntityRepository,com.coco.sqldb" />
    <register type="com.coco.sqldb.EFHui.repository.ICityEntityRepository,com.coco.sqldb" mapTo="com.coco.sqldb.EFHui.repository.CityEntityRepository,com.coco.sqldb" />
    <register type="com.coco.sqldb.EFHui.repository.IFlightEntityRepository,com.coco.sqldb" mapTo="com.coco.sqldb.EFHui.repository.FlightEntityRepository,com.coco.sqldb" />
    <register type="com.coco.sqldb.EFHui.repository.IFlightSeatEntityRepository,com.coco.sqldb" mapTo="com.coco.sqldb.EFHui.repository.FlightSeatEntityRepository,com.coco.sqldb" />
    <register type="com.coco.sqldb.EFHui.repository.ISeatSaleEntityRepository,com.coco.sqldb" mapTo="com.coco.sqldb.EFHui.repository.SeatSaleEntityRepository,com.coco.sqldb" />
-->
    <!--
    <!- -註冊類+構造函數 默認數值是3- ->
    <register type="InstallerBase" mapTo="BlogInstaller">
      <constructor>
        <param name="pubContext" type="IPubContext" />
        <param name="sum" type="System.Int32" value="3" />
      </constructor>
    </register>

    <!- -<register type="ISomeInterface[]" mapTo="MyTypeImplementingSomeInterface[]"/>- ->
    <register type="ISomeInterface[System.Int32]" mapTo="MyTypeImplementingSomeInterface[System.Int32]"/>


    <register type="ObjectWithOverloads" name="callFirstOverload">
      <method name="CallMe">
        <param name="param" type="int" value="17"/>
      </method>
    </register>

    <register type="ILogger" mapTo="MockLogger" name="validLogger" />
    <register type="ObjectUsingLogger" name="dependencyRegistered">
      <property name="Logger">
        <optional name="validLogger" />
      </property>
    </register>
    <!- -數值- ->
    <register type="ILogger" name="main" mapTo="MockLogger" />
    <register type="ILogger" name="another" mapTo="MockLogger" />
    <register type="ILogger" name="special" mapTo="SpecialLogger" />
    <register type="ArrayDependencyObject" name="specificElements">
      <property name="Loggers">
        <array>
          <dependency name="main" />
          <dependency name="another" />
        </array>
      </property>
    </register>
    -->
    
    
  </container>

</unity>