GitHub

mkdir learngit
cd learngit
pwd   //显示当前目录

git init  //把当前目录变成Git可以管理的仓库

git add readme.txt 
git commit -m "wrote a readme file"

git add file1.txt file2.txt file3.txt
git commit -m "add 3 files."

git status  //仓库当前的状态
git diff readme.txt   

//提交修改和提交新文件是一样的两步，第一步是
git add
//第二步
git commit -m "add distributed"

git log
git log --pretty=oneline

//回退到上一个版本
$ git reset --hard HEAD^
//回退到上上一个版本
$ git reset --hard HEAD^^
//回退到往上100个版本
$ git reset --hard HEAD~100

//回到回退之前的版本 ， 版本号写前面几位就可以了
git reset --hard 3628164……

//记录每一次的命令
git reflog


工作区  add --> 暂存区  commit -->  当前分支

//查看工作区和版本库里面最新版本的区别
git diff HEAD -- readme.txt 

//把readme.txt文件在[工作区]的修改全部撤销
//让这个文件回到最近一次git commit或git add时的状态
git checkout -- readme.txt

//把暂存区的修改撤销掉（unstage），重新放回工作区
git reset HEAD file
git reset HEAD readme.txt
//git reset命令既可以回退版本???，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本

//删除物理文件
rm test.txt
//从版本库删除该文件（rm 并且 commit）
git rm test.txt
git commit -m "remove test.txt"

//用版本库里的版本替换工作区的版本
git checkout
git checkout -- test.txt

//创建SSH Key,在主目录下没有id_rsa和id_rsa.pub时需要；由于本地Git仓库和GitHub仓库之间的传输是通过SSH加密的；
ssh-keygen -t rsa -C "youremail@example.com"

.ssh目录下 .pub 公钥需添加到 GitHub 网址 settings > SSH keys , 以确保Github确认你的提交；

//关联一个远程库(origin 远程库的名字)
git remote add origin git@server-name:path/repo-name.git

//把当前分支master推送到远程库上 (origin 远程库的名字)
git push -u origin master
//由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
  Git不但会把本地的master分支内容推送的远程新的master分支，
  还会把本地的master分支和远程的master分支关联起来，
  在以后的推送或者拉取时就可以简化命令

//把本地master分支的最新修改推送至GitHub
git push origin master

//从Github克隆一个本地库
git clone git@github.com:michaelliao/gitskills.git
cd gitskills
ls


//Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
//使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。


创建dev分支，然后切换到dev分支
git checkout -b dev
  ===
git branch dev  //创建分支
git checkout dev  //切换分支

//查看当前分支
git branch
//合并指定分支(dev)到当前分支
git merge dev
//合并完成后，就可以放心地删除dev分支了
git branch -d dev


当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支。 最简单的就是之前看到的例子，运行 git checkout -b [branch] [remotename]/[branch]。 这是一个十分常用的操作所以 Git 提供了 --track 快捷方式：

git checkout --track origin/serverfix


//用带参数的git log也可以看到分支的合并情况
git log --graph --pretty=oneline --abbrev-commit

//合并dev分支，--no-ff参数，表示禁用Fast forward，加上-m参数，把commit描述写进去
git merge --no-ff -m "merge with no-ff" dev


//把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash
//之后查看工作区就是干净的了，
git status
//之后可切换去其他分支处理问题，eg：fix bug，完成后切换回之前分支
//
git status
//查看储藏的工作现场
git stash list
//恢复工作现场有两种方式；
//一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
git stash apply
//另一种方式是用git stash pop，恢复的同时把stash内容也删了
git stash pop

//多次stash后，恢复指定的stash
git stash apply stash@{0}

//丢弃一个没有被合并过的分支
git branch -D <name>



//查看远程库的信息
git remote
//显示更详细的信息
git remote -v

//把该分支上的所有本地提交推送到远程库
git push origin master
git push origin dev


并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！


//如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并
git pull
//如果提示“no tracking information”，说明本地分支和远程分支的链接关系没有创建
git branch --set-upstream branch-name origin/branch-name
git pull
//如果合并有冲突，则解决冲突，并在本地提交
git add ～～
git commit -m 'fix merge conflict'
git push origin dev



//创建标签
git branch
git checkout master
//命令git tag <name>就可以打一个新标签
git tag v1.0
//命令git tag查看所有标签
git tag

//git log --pretty=oneline --abbrev-commit
//为之前的commit打标签
git tag v0.9 <commit-id>
//查看标签信息
git show v0.9
//创建带有说明的标签，用-a指定标签名，-m指定说明文字
git tag -a v1.1 -m "version 1.1 released"  3685575

//通过-s用私钥签名一个标签
git tag -s v1.2 -m "signed version1.2 releassed"  55152528

签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：
gpg: signing failed: secret key not available
error: gpg failed to sign the data
error: unable to sign the tag
用PGP签名的标签是不可伪造的，因为可以验证PGP签名。验证签名的方法比较复杂

//删除标签
git tag -d v0.9
//推送某个标签到远程
git push origin v1.0
//一次性推送全部尚未推送到远程的本地标签
git push origin --tags
//如标签已推送至远程，删除则 需先从本地删除 ，再从远程删除
git tag -d v1.2
git push origin :refs/tags/v1.2

//让Git显示颜色，会让命令输出看起来更醒目
git config --global color.ui true


在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。

不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore

忽略文件的原则是：

忽略操作系统自动生成的文件，比如缩略图等；
忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

# Windows:
Thumbs.db
ehthumbs.db
Desktop.ini

# Python:
*.py[cod]
*.so
*.egg
*.egg-info
dist
build

# My configurations:
db.ini
deploy_key_rsa

最后一步就是把.gitignore也提交到Git，就完成了！
当然检验.gitignore的标准是git status命令是不是说working directory clean


//告诉Git，以后st就表示status
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch

git config --global alias.unstage 'reset HEAD'
git unstage test.py   ==   git reset HEAD test.py

git config --global alias.last 'log -1'
git last

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"



配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
每个仓库的Git配置文件都放在.git/config文件中,
别名就在[alias]后面，要删除别名，直接把对应的行删掉即可；
当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中

 git config --list

配置github代理 
 git config --global http.proxy http://127.0.0.1:8087/

================================================================================================================================================

Git常用命令
查看、添加、提交、删除、找回，重置修改文件

git help <command> # 显示command的help

git show # 显示某次提交的内容 git show $id

git co -- <file> # 抛弃工作区修改

git co . # 抛弃工作区修改

git add <file> # 将工作文件修改提交到本地暂存区

git add . # 将所有修改过的工作文件提交暂存区

git rm <file> # 从版本库中删除文件

git rm <file> --cached # 从版本库中删除文件，但不删除文件

git reset <file> # 从暂存区恢复到工作文件

git reset -- . # 从暂存区恢复到工作文件

git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改

git ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am "some comments"

git ci --amend # 修改最后一次提交记录

git revert <$id> # 恢复某次提交的状态，恢复动作本身也创建次提交对象

git revert HEAD # 恢复最后一次提交的状态

查看文件diff

git diff <file> # 比较当前文件和暂存区文件差异 git diff

git diff <id1><id1><id2> # 比较两次提交之间的差异

git diff <branch1>..<branch2> # 在两个分支之间比较

git diff --staged # 比较暂存区和版本库差异

git diff --cached # 比较暂存区和版本库差异

git diff --stat # 仅仅比较统计信息

查看提交记录

git log git log <file> # 查看该文件每次提交记录

git log -p <file> # 查看每次详细修改内容的diff

git log -p -2 # 查看最近两次详细修改内容的diff

git log --stat #查看提交统计信息

tig

Mac上可以使用tig代替diff和log，brew install tig

Git 本地分支管理

查看、切换、创建和删除分支

git br -r # 查看远程分支

git br <new_branch> # 创建新的分支

git br -v # 查看各个分支最后提交信息

git br --merged # 查看已经被合并到当前分支的分支

git br --no-merged # 查看尚未被合并到当前分支的分支

git co <branch> # 切换到某个分支

git co -b <new_branch> # 创建新的分支，并且切换过去

git co -b <new_branch> <branch> # 基于branch创建新的new_branch

git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除

git co $id -b <new_branch> # 把某次历史提交记录checkout出来，创建成一个分支

git br -d <branch> # 删除某个分支

git br -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)

 分支合并和rebase

git merge <branch> # 将branch分支合并到当前分支

git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交

git rebase master <branch> # 将master rebase到branch，相当于： git co <branch> && git rebase master && git co master && git merge <branch>

 Git补丁管理(方便在多台机器上开发同步时用)

git diff > ../sync.patch # 生成补丁

git apply ../sync.patch # 打补丁

git apply --check ../sync.patch #测试补丁能否成功

 Git暂存管理

git stash # 暂存

git stash list # 列所有stash

git stash apply # 恢复暂存的内容

git stash drop # 删除暂存区

Git远程分支管理

git pull # 抓取远程仓库所有分支更新并合并到本地

git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并

git fetch origin # 抓取远程仓库更新

git merge origin/master # 将远程主分支合并到本地当前分支

git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支

git co -b <local_branch> origin/<remote_branch> # 基于远程分支创建本地分支，功能同上

git push # push所有分支

git push origin master # 将本地主分支推到远程主分支

git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)

git push origin <local_branch> # 创建远程分支， origin是远程仓库名

git push origin <local_branch>:<remote_branch> # 创建远程分支

git push origin :<remote_branch> #先删除本地分支(git br -d <branch>)，然后再push删除远程分支

 git push origin --delete remote_branch

Git远程仓库管理

GitHub

git remote -v # 查看远程服务器地址和仓库名称

git remote show origin # 查看远程服务器仓库状态

git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址

git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm <repository> # 删除远程仓库

创建远程仓库

git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库

scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上

mkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库

git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址

git push -u origin master # 客户端首次提交

git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track

git remote set-head origin master # 设置远程仓库的HEAD指向master分支

也可以命令设置跟踪远程库和本地库

git branch --set-upstream master origin/master

git branch --set-upstream develop origin/develop



::git config

::
git config --global color.ui true

git config --global core.longpaths true

git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch

git config --global alias.sync '!git pull && git push'

git config --global alias.last 'log -1'
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

================================================================================

直接找到要回退的版本号（这里是：83ff2785），reset之后，强行推送到服务器端：

git reset --hard 83ff2785
git push --force
1
2
此时如果有人获取了更新的版本，可能拉去不下来，执行以下操作：

git fetch --all
git reset --hard origin/branchname
1
2
branchname就是分支的名称，这时候就和服务器端一致了。


